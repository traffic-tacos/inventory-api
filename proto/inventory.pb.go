// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: proto/inventory.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SeatRef represents a reference to a specific seat
type SeatRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeatId        string                 `protobuf:"bytes,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeatRef) Reset() {
	*x = SeatRef{}
	mi := &file_proto_inventory_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeatRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatRef) ProtoMessage() {}

func (x *SeatRef) ProtoReflect() protoreflect.Message {
	mi := &file_proto_inventory_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatRef.ProtoReflect.Descriptor instead.
func (*SeatRef) Descriptor() ([]byte, []int) {
	return file_proto_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *SeatRef) GetSeatId() string {
	if x != nil {
		return x.SeatId
	}
	return ""
}

// CheckReq represents a request to check availability
type CheckReq struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	EventId string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// If qty > 0, check quantity-based inventory
	// If seat_ids is not empty, check seat-based inventory (takes precedence)
	Qty           int32      `protobuf:"varint,2,opt,name=qty,proto3" json:"qty,omitempty"`
	SeatIds       []*SeatRef `protobuf:"bytes,3,rep,name=seat_ids,json=seatIds,proto3" json:"seat_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckReq) Reset() {
	*x = CheckReq{}
	mi := &file_proto_inventory_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckReq) ProtoMessage() {}

func (x *CheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_inventory_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckReq.ProtoReflect.Descriptor instead.
func (*CheckReq) Descriptor() ([]byte, []int) {
	return file_proto_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *CheckReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CheckReq) GetQty() int32 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *CheckReq) GetSeatIds() []*SeatRef {
	if x != nil {
		return x.SeatIds
	}
	return nil
}

// CheckRes represents the response to availability check
type CheckRes struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Available        bool                   `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	UnavailableSeats []string               `protobuf:"bytes,2,rep,name=unavailable_seats,json=unavailableSeats,proto3" json:"unavailable_seats,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CheckRes) Reset() {
	*x = CheckRes{}
	mi := &file_proto_inventory_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRes) ProtoMessage() {}

func (x *CheckRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_inventory_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRes.ProtoReflect.Descriptor instead.
func (*CheckRes) Descriptor() ([]byte, []int) {
	return file_proto_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *CheckRes) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CheckRes) GetUnavailableSeats() []string {
	if x != nil {
		return x.UnavailableSeats
	}
	return nil
}

// CommitReq represents a request to commit a reservation
type CommitReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReservationId   string                 `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	EventId         string                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Qty             int32                  `protobuf:"varint,3,opt,name=qty,proto3" json:"qty,omitempty"`
	SeatIds         []*SeatRef             `protobuf:"bytes,4,rep,name=seat_ids,json=seatIds,proto3" json:"seat_ids,omitempty"`
	PaymentIntentId string                 `protobuf:"bytes,5,opt,name=payment_intent_id,json=paymentIntentId,proto3" json:"payment_intent_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CommitReq) Reset() {
	*x = CommitReq{}
	mi := &file_proto_inventory_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReq) ProtoMessage() {}

func (x *CommitReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_inventory_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReq.ProtoReflect.Descriptor instead.
func (*CommitReq) Descriptor() ([]byte, []int) {
	return file_proto_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *CommitReq) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *CommitReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CommitReq) GetQty() int32 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *CommitReq) GetSeatIds() []*SeatRef {
	if x != nil {
		return x.SeatIds
	}
	return nil
}

func (x *CommitReq) GetPaymentIntentId() string {
	if x != nil {
		return x.PaymentIntentId
	}
	return ""
}

// CommitRes represents the response to commit reservation
type CommitRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // "CONFIRMED"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitRes) Reset() {
	*x = CommitRes{}
	mi := &file_proto_inventory_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRes) ProtoMessage() {}

func (x *CommitRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_inventory_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRes.ProtoReflect.Descriptor instead.
func (*CommitRes) Descriptor() ([]byte, []int) {
	return file_proto_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *CommitRes) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CommitRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// ReleaseReq represents a request to release a hold
type ReleaseReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReservationId string                 `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	EventId       string                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Qty           int32                  `protobuf:"varint,3,opt,name=qty,proto3" json:"qty,omitempty"`
	SeatIds       []*SeatRef             `protobuf:"bytes,4,rep,name=seat_ids,json=seatIds,proto3" json:"seat_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseReq) Reset() {
	*x = ReleaseReq{}
	mi := &file_proto_inventory_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseReq) ProtoMessage() {}

func (x *ReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_inventory_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseReq.ProtoReflect.Descriptor instead.
func (*ReleaseReq) Descriptor() ([]byte, []int) {
	return file_proto_inventory_proto_rawDescGZIP(), []int{5}
}

func (x *ReleaseReq) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *ReleaseReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ReleaseReq) GetQty() int32 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *ReleaseReq) GetSeatIds() []*SeatRef {
	if x != nil {
		return x.SeatIds
	}
	return nil
}

// ReleaseRes represents the response to release hold
type ReleaseRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // "RELEASED"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseRes) Reset() {
	*x = ReleaseRes{}
	mi := &file_proto_inventory_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRes) ProtoMessage() {}

func (x *ReleaseRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_inventory_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRes.ProtoReflect.Descriptor instead.
func (*ReleaseRes) Descriptor() ([]byte, []int) {
	return file_proto_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *ReleaseRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_proto_inventory_proto protoreflect.FileDescriptor

const file_proto_inventory_proto_rawDesc = "" +
	"\n" +
	"\x15proto/inventory.proto\x12\finventory.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\"\n" +
	"\aSeatRef\x12\x17\n" +
	"\aseat_id\x18\x01 \x01(\tR\x06seatId\"i\n" +
	"\bCheckReq\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x10\n" +
	"\x03qty\x18\x02 \x01(\x05R\x03qty\x120\n" +
	"\bseat_ids\x18\x03 \x03(\v2\x15.inventory.v1.SeatRefR\aseatIds\"U\n" +
	"\bCheckRes\x12\x1c\n" +
	"\tavailable\x18\x01 \x01(\bR\tavailable\x12+\n" +
	"\x11unavailable_seats\x18\x02 \x03(\tR\x10unavailableSeats\"\xbd\x01\n" +
	"\tCommitReq\x12%\n" +
	"\x0ereservation_id\x18\x01 \x01(\tR\rreservationId\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\tR\aeventId\x12\x10\n" +
	"\x03qty\x18\x03 \x01(\x05R\x03qty\x120\n" +
	"\bseat_ids\x18\x04 \x03(\v2\x15.inventory.v1.SeatRefR\aseatIds\x12*\n" +
	"\x11payment_intent_id\x18\x05 \x01(\tR\x0fpaymentIntentId\">\n" +
	"\tCommitRes\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\"\x92\x01\n" +
	"\n" +
	"ReleaseReq\x12%\n" +
	"\x0ereservation_id\x18\x01 \x01(\tR\rreservationId\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\tR\aeventId\x12\x10\n" +
	"\x03qty\x18\x03 \x01(\x05R\x03qty\x120\n" +
	"\bseat_ids\x18\x04 \x03(\v2\x15.inventory.v1.SeatRefR\aseatIds\"$\n" +
	"\n" +
	"ReleaseRes\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status2\xda\x01\n" +
	"\tInventory\x12C\n" +
	"\x11CheckAvailability\x12\x16.inventory.v1.CheckReq\x1a\x16.inventory.v1.CheckRes\x12E\n" +
	"\x11CommitReservation\x12\x17.inventory.v1.CommitReq\x1a\x17.inventory.v1.CommitRes\x12A\n" +
	"\vReleaseHold\x12\x18.inventory.v1.ReleaseReq\x1a\x18.inventory.v1.ReleaseResB-Z+github.com/traffictacos/inventory-api/protob\x06proto3"

var (
	file_proto_inventory_proto_rawDescOnce sync.Once
	file_proto_inventory_proto_rawDescData []byte
)

func file_proto_inventory_proto_rawDescGZIP() []byte {
	file_proto_inventory_proto_rawDescOnce.Do(func() {
		file_proto_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_inventory_proto_rawDesc), len(file_proto_inventory_proto_rawDesc)))
	})
	return file_proto_inventory_proto_rawDescData
}

var file_proto_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_inventory_proto_goTypes = []any{
	(*SeatRef)(nil),    // 0: inventory.v1.SeatRef
	(*CheckReq)(nil),   // 1: inventory.v1.CheckReq
	(*CheckRes)(nil),   // 2: inventory.v1.CheckRes
	(*CommitReq)(nil),  // 3: inventory.v1.CommitReq
	(*CommitRes)(nil),  // 4: inventory.v1.CommitRes
	(*ReleaseReq)(nil), // 5: inventory.v1.ReleaseReq
	(*ReleaseRes)(nil), // 6: inventory.v1.ReleaseRes
}
var file_proto_inventory_proto_depIdxs = []int32{
	0, // 0: inventory.v1.CheckReq.seat_ids:type_name -> inventory.v1.SeatRef
	0, // 1: inventory.v1.CommitReq.seat_ids:type_name -> inventory.v1.SeatRef
	0, // 2: inventory.v1.ReleaseReq.seat_ids:type_name -> inventory.v1.SeatRef
	1, // 3: inventory.v1.Inventory.CheckAvailability:input_type -> inventory.v1.CheckReq
	3, // 4: inventory.v1.Inventory.CommitReservation:input_type -> inventory.v1.CommitReq
	5, // 5: inventory.v1.Inventory.ReleaseHold:input_type -> inventory.v1.ReleaseReq
	2, // 6: inventory.v1.Inventory.CheckAvailability:output_type -> inventory.v1.CheckRes
	4, // 7: inventory.v1.Inventory.CommitReservation:output_type -> inventory.v1.CommitRes
	6, // 8: inventory.v1.Inventory.ReleaseHold:output_type -> inventory.v1.ReleaseRes
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_inventory_proto_init() }
func file_proto_inventory_proto_init() {
	if File_proto_inventory_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_inventory_proto_rawDesc), len(file_proto_inventory_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_inventory_proto_goTypes,
		DependencyIndexes: file_proto_inventory_proto_depIdxs,
		MessageInfos:      file_proto_inventory_proto_msgTypes,
	}.Build()
	File_proto_inventory_proto = out.File
	file_proto_inventory_proto_goTypes = nil
	file_proto_inventory_proto_depIdxs = nil
}
