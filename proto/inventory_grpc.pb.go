// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/inventory.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Inventory_CheckAvailability_FullMethodName = "/inventory.v1.Inventory/CheckAvailability"
	Inventory_CommitReservation_FullMethodName = "/inventory.v1.Inventory/CommitReservation"
	Inventory_ReleaseHold_FullMethodName       = "/inventory.v1.Inventory/ReleaseHold"
)

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Inventory service for managing ticket inventory with zero oversell guarantee
type InventoryClient interface {
	// CheckAvailability checks if inventory is available for the given event
	CheckAvailability(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckRes, error)
	// CommitReservation commits a reservation by reducing inventory
	// This operation is atomic and guarantees zero oversell
	CommitReservation(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRes, error)
	// ReleaseHold releases a hold on inventory (idempotent operation)
	ReleaseHold(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*ReleaseRes, error)
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) CheckAvailability(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckRes)
	err := c.cc.Invoke(ctx, Inventory_CheckAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) CommitReservation(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitRes)
	err := c.cc.Invoke(ctx, Inventory_CommitReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ReleaseHold(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*ReleaseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseRes)
	err := c.cc.Invoke(ctx, Inventory_ReleaseHold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
// All implementations must embed UnimplementedInventoryServer
// for forward compatibility.
//
// Inventory service for managing ticket inventory with zero oversell guarantee
type InventoryServer interface {
	// CheckAvailability checks if inventory is available for the given event
	CheckAvailability(context.Context, *CheckReq) (*CheckRes, error)
	// CommitReservation commits a reservation by reducing inventory
	// This operation is atomic and guarantees zero oversell
	CommitReservation(context.Context, *CommitReq) (*CommitRes, error)
	// ReleaseHold releases a hold on inventory (idempotent operation)
	ReleaseHold(context.Context, *ReleaseReq) (*ReleaseRes, error)
	mustEmbedUnimplementedInventoryServer()
}

// UnimplementedInventoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServer struct{}

func (UnimplementedInventoryServer) CheckAvailability(context.Context, *CheckReq) (*CheckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedInventoryServer) CommitReservation(context.Context, *CommitReq) (*CommitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitReservation not implemented")
}
func (UnimplementedInventoryServer) ReleaseHold(context.Context, *ReleaseReq) (*ReleaseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseHold not implemented")
}
func (UnimplementedInventoryServer) mustEmbedUnimplementedInventoryServer() {}
func (UnimplementedInventoryServer) testEmbeddedByValue()                   {}

// UnsafeInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServer will
// result in compilation errors.
type UnsafeInventoryServer interface {
	mustEmbedUnimplementedInventoryServer()
}

func RegisterInventoryServer(s grpc.ServiceRegistrar, srv InventoryServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Inventory_ServiceDesc, srv)
}

func _Inventory_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).CheckAvailability(ctx, req.(*CheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_CommitReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).CommitReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_CommitReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).CommitReservation(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ReleaseHold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ReleaseHold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_ReleaseHold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ReleaseHold(ctx, req.(*ReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Inventory_ServiceDesc is the grpc.ServiceDesc for Inventory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inventory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.v1.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAvailability",
			Handler:    _Inventory_CheckAvailability_Handler,
		},
		{
			MethodName: "CommitReservation",
			Handler:    _Inventory_CommitReservation_Handler,
		},
		{
			MethodName: "ReleaseHold",
			Handler:    _Inventory_ReleaseHold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/inventory.proto",
}
